version: '3.9'

x-typeorm: &typeorm-env
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_PORT: ${POSTGRES_PORT}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}
  JWT_SECRET: ${JWT_SECRET}

volumes:
  postgres_data: {}
  front_data:
    driver: local

networks:
  authentication-network:
    name: authentication-network
    driver: bridge
    external: false

#---------- SERVICES ----------#
services:

  client_web:
    profiles:
      - web
      - all
    container_name: web
    build:
      context: ./web
      dockerfile: ./Dockerfile
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    volumes:
      - ./web:/app
      - front_data:/app/front_data
    depends_on:
      - server
      - client_mobile
    entrypoint: [ "npm", "start" ]

  client_mobile:
    profiles:
      - mobile
      - all
    container_name: mobile
    build:
      context: ./mobile
      dockerfile: ./Dockerfile
    volumes:
      - ./mobile:/app
      - front_data:/app/front_data
    depends_on:
      - server
    healthcheck:
      disable: true
    # entrypoint: [ "npm", "run", "web" ]

  server:
    profiles:
      - backend
      - mobile
      - web
      - all
    container_name: backend
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    networks:
      - authentication-network
    volumes:
      - ./backend:/home/node/app
    depends_on:
      - postgres-db
    env_file:
      - .env
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      <<: *typeorm-env
    entrypoint: [ "npm", "run", "start:dev", "--tsc" ]

  postgres-db:
    image: postgres:14
    container_name: ${POSTGRES_HOST}
    environment:
      <<: *typeorm-env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - authentication-network
    volumes:
      - postgres_data:/var/lib/postgresql@14/data
